services:
  django-backend:
    build: ./backend
    container_name: django-backend
    command: >
      bash -c "python manage.py makemigrations app &&
               python manage.py migrate &&
               python manage.py runserver 0.0.0.0:8000"
    volumes:
      - ./backend:/app
      - ${XDG_RUNTIME_DIR}/docker.sock:/var/run/docker.sock:rw
    environment:
      - DJANGO_SETTINGS_MODULE=app.settings
      - DOCKER_HOST=unix:///var/run/docker.sock
      - DB_HOST=postgres-db
      - DB_PORT=5432
      - DB_NAME=mydatabase
      - DB_USER=myuser
      - DB_PASSWORD=mypassword
      - PYTHONUNBUFFERED=1
      - POSTGRES_PASSWORD=mypassword
      - PGHOST=postgres-db
      - PGUSER=myuser
      - PGPASSWORD=mypassword
      - PGDATABASE=mydatabase
    depends_on:
      postgres-db:
        condition: service_healthy
    networks:
      - app-network
    ports:
      - "8000:8000"

  postgres-db:
    container_name: postgres-db
    image: postgres:13
    command: postgres -c 'max_connections=200'
    environment:
      - POSTGRES_DB=mydatabase
      - POSTGRES_USER=myuser
      - POSTGRES_PASSWORD=mypassword
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    healthcheck:
      test: pg_isready -U myuser -d mydatabase
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - app-network

  ghost-instance:
    build: ./ghost
    container_name: ghost-instance
    environment:
      - url=http://localhost:2368
    ports:
      - "2368:2368"
    volumes:
      - ghost_data:/var/lib/ghost/content
    networks:
      - app-network
    depends_on:
      - postgres-db

  frontend:
    build: ./frontend
    container_name: frontend
    volumes:
      - ./frontend:/app
    ports:
      - "3000:3000"
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
  ghost_data: